{"version":3,"file":"upgrade_typescript_and_functional_and_async.js","sourceRoot":"","sources":["upgrade_typescript_and_functional_and_async.ts"],"names":[],"mappings":"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","sourcesContent":["interface LectureContent {\n    lectureName: string,\n    taskName: string,\n    taskInfo: string,\n    taskLinks: TaskLinks\n}\n\ninterface TaskLinks {\n    template: string | null,\n    result: string,\n    source: string\n}\n\ntype TemplateFunction = (LectureContent) => string;\ntype TemplateType = \"image\" | \"iframe\" | null;\n\nclass LectureContentLoader {\n    private lectureContents: LectureContent[];\n\n    private infoMaxLength: number = 100;\n    private infoMinRestLength: number = 100;\n    private readonly infoClassRest = \"rest\";\n    private readonly infoClassCut = \"cut\";\n\n    constructor(contentRootQuery: string, jsonFilePath: string) {\n        (async () => {\n            try {\n                this.lectureContents = await this.loadLectureContent(jsonFilePath);\n                this.renderLectureContent(contentRootQuery);\n            } catch (e) {\n                console.error(e);\n            }\n        })();\n    }\n\n    private async loadLectureContent(jsonFilePath: string): Promise<LectureContent[]> {\n        const response = await fetch(jsonFilePath);\n        return response.json();\n    }\n\n    private renderLectureContent(contentRootQuery) {\n        let content: LectureContent;\n        let html: string = \"\";\n\n        for (content of this.lectureContents) {\n            html += this.createHtmlCode(\n                content,\n                this.sectionClassFunction,\n                this.taskInfoFunction,\n                this.taskTemplateFunction,\n                this.taskLinksFunction\n            );\n        }\n\n        document.querySelector(contentRootQuery).innerHTML = html;\n    }\n\n    private createHtmlCode(\n        content: LectureContent,\n        sectionClassFunction: TemplateFunction,\n        taskInfoFunction: TemplateFunction,\n        taskTemplateFunction: TemplateFunction,\n        taskLinksFunction: TemplateFunction,\n    ): string {\n        const htmlCode = `\n             <section class=\"${sectionClassFunction.call(this, content)}\">\n                <h3>${content.lectureName}</h3>\n                <h4>${content.taskName}</h4>\n        \n                <ul class=\"taskInfo\">\n                    <li>\n                        ${taskInfoFunction.call(this, content)}\n                    </li>\n                </ul>\n        \n                <div class=\"taskDetails\">\n                    <div class=\"taskLinks\">\n                        ${taskLinksFunction.call(this, content)}\n                    </div>\n                    \n                    <div class=\"taskTemplate\">\n                        ${taskTemplateFunction.call(this, content)}\n                    </div>\n                </div>\n            </section>\n        `;\n\n        return htmlCode;\n    }\n\n    private taskTemplateFunction(content: LectureContent): string {\n        switch (this.templateType(content)) {\n            case null:\n                return \"\";\n            case \"iframe\":\n                return `<iframe loading=\"lazy\" \n                            src=\"${content.taskLinks.template}\"\n                            title=\"${content.taskName}\"\n                            ></iframe>`;\n            case \"image\":\n                return `<img loading=\"lazy\" \n                            src=\"${content.taskLinks.template}\"\n                            alt=\"${content.taskName}\"\n                            title=\"${content.taskName}\"\n                            \">`;\n        }\n    }\n\n    private templateType(content: LectureContent): TemplateType {\n        const pictureRegex = /png|jpg|jpeg|gif$/;\n        const iframeRegex = /youtube\\.com|youtu\\.be/;\n\n        if (content.taskLinks.template === null) {\n            return null;\n        } else if ((content.taskLinks.template.match(pictureRegex)) !== null) {\n            return \"image\";\n        } else if (content.taskLinks.template.match(iframeRegex) !== null) {\n            return \"iframe\";\n        }\n\n        throw \"unknown template type\";\n    }\n\n    private taskLinksFunction(content: LectureContent): string {\n        let templateLink: String\n            = content.taskLinks.template !== null\n            ? ` <a target=\"_blank\" href=\"${content.taskLinks.template}\">Vorlage</a>`\n            : \"\";\n\n        return `\n            ${templateLink}\n            <a target=\"_blank\" href=\"${content.taskLinks.result}\">Ergebnis</a>\n            <a target=\"_blank\" href=\"${content.taskLinks.source}\">Quelle</a>\n        `;\n    }\n\n    private taskInfoFunction(content: LectureContent): string {\n        if (\n            content.taskInfo.length\n            > (this.infoMaxLength + this.infoMinRestLength)\n        ) {\n            let contentStart: String = content.taskInfo.slice(0, this.infoMaxLength);\n            let contentEnd: String = content.taskInfo.slice(this.infoMaxLength);\n\n            return contentStart\n                + \"<span class='\" + this.infoClassCut + \"'></span>\"\n                + \"<span class='\" + this.infoClassRest + \"'>\" + contentEnd + \"</span>\"\n                + \"<a onclick='this.parentElement.classList.toggle(\\\"more\\\");'></a>\";\n        }\n\n        return content.taskInfo;\n\n    }\n\n    private sectionClassFunction(content: LectureContent): string{\n        return content.taskLinks.template === null ? \"\" : \"hasTemplate\";\n    }\n}\n\nnew LectureContentLoader(\"article\", \"./content.json\");"]}