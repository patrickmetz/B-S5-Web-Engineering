{"version":3,"file":"server.js","sourceRoot":"","sources":["server.ts"],"names":[],"mappings":"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","sourcesContent":["// start via \"deno run --allow-net --allow-read\"\n\ninterface CovidData {\n    \"Bundesland\": string,\n    \"Anzahl\": number,\n    \"Differenz zum Vortag\": number,\n    \"Faelle in den letzten 7 Tagen\": number,\n    \"7-Tage-Inzidenz\": number,\n    \"Todesfaelle\": number\n}\n\ninterface SimpleStatistics {\n    min: number,\n    max: number,\n    mean: number,\n    sum: number\n}\n\nclass Covid19StatisticsServer {\n    // null type stops deno from complaining about fields initialized in IIFE\n    private _covidData: CovidData[] | null = null;\n    private _httpServer: Deno.Listener | null = null;\n\n    constructor(serverPort: number, textFilePath: string) {\n        (async () => {\n            try {\n                this._covidData = await this._readTextFileAsCovidData(textFilePath);\n                this._httpServer = this._createServer(serverPort);\n                this._serveAllHttpConnections();\n            } catch (e) {\n                console.error(e);\n            }\n        })();\n    }\n\n    private async _readTextFileAsCovidData(jsonFilePath: string): Promise<CovidData[]> {\n        return JSON.parse(await Deno.readTextFile(jsonFilePath));\n    }\n\n    private _createServer(port: number): Deno.Listener {\n        console.log(`Covid 19 statistics server is listening at: http://localhost:${port}/`);\n        return Deno.listen({port: port});\n    }\n\n    private async _serveAllHttpConnections(): Promise<void> {\n        if (this._httpServer !== null) {\n            let connection: Deno.Conn; // can't declare type in for/of-loop\n\n            for await (connection of this._httpServer) {\n                this._serveOneHttpConnection(connection); // not using await => non blocking\n            }\n        }\n    }\n\n    private async _serveOneHttpConnection(connection: Deno.Conn): Promise<void> {\n        const httpConnection: Deno.HttpConn = Deno.serveHttp(connection);\n\n        for await (const requestEvent of httpConnection) {\n            requestEvent.respondWith(\n                new Response(this._htmlCode(), {\n                    status: 200,\n                    headers: {\n                        'content-type': 'text/html; charset=UTF-8'\n                    }\n                }),\n            );\n        }\n    }\n\n    private _htmlCode(): string {\n        if (this._covidData !== null) {\n            const statistics = this._numbersToSimpleStatistics(\n                this._covidData.map(x => x.Anzahl)\n            );\n\n            return `<!DOCTYPE html>\n                <html lang=\"en\">\n                <head>\n                    <meta charset=\"UTF-8\">\n                    <title>Covid19-Statistik</title>\n                    \n                    <style>\n                        td:first-child{font-weight: bold};\n                    </style>\n                </head>\n                <body>\n                \n                <h1>Covid19-Fälle in deutschen Bundesländern</h1>\n                <table>\n                    <tr><td>Minimale Anzahl</td><td>${statistics.min}</td></tr>\n                    <tr><td>Maximale Anzahl</td><td>${statistics.max}</td></tr>\n                    <tr><td>Durchschnitt</td><td>${statistics.mean}</td></tr>\n                    <tr><td>Summe</td><td>${statistics.sum}</td></tr>\n                </table>\n                \n                </body>\n                </html>`;\n        }\n        return \"\";\n    }\n\n    private _numbersToSimpleStatistics(numbers: number[]): SimpleStatistics {\n        // source: https://stackoverflow.com/a/1669222\n        const min = Math.min(...numbers);\n        const max = Math.max(...numbers);\n\n        // source: https://stackoverflow.com/a/10624256\n        const sum = numbers.reduce((a, b) => a + b, 0);\n        const mean = Math.round(sum / numbers.length);\n\n        return {min: min, max: max, mean: mean, sum: sum};\n    }\n}\n\nnew Covid19StatisticsServer(\n    8080,\n    './covid_19_fallzahlen_in_deutschland.json'\n);\n"]}