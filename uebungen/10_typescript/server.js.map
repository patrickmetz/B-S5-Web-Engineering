{"version":3,"file":"server.js","sourceRoot":"","sources":["server.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAA6C;AAC7C,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC3C,OAAO,CAAC,GAAG,CAAC,gEAAgE,CAAC,CAAC;;IAE9E,qEAAqE;IACrE,KAAyB,IAAA,WAAA,cAAA,MAAM,CAAA,YAAA;QAApB,IAAM,IAAI,mBAAA,CAAA;QACjB,8EAA8E;QAC9E,gCAAgC;QAChC,SAAS,CAAC,IAAI,CAAC,CAAC;KACnB;;;;;;;;;AAED,SAAe,SAAS,CAAC,IAAe;;;;;;;;oBAE9B,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;;;oBAGL,aAAA,cAAA,QAAQ,CAAA;;;;;oBAAxB,YAAY,qBAAA,CAAA;oBAGnB,SAAO,6BACT,MAAA,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAC5B,YAAY,CACf,mCAAI,SAAS,CAChB,CAAC;oBACH,yEAAyE;oBACzE,sBAAsB;oBACtB,YAAY,CAAC,WAAW,CACpB,IAAI,QAAQ,CAAC,MAAI,EAAE;wBACf,MAAM,EAAE,GAAG;qBACd,CAAC,CACL,CAAC;;;;;;;;;;;;;;;;;;;;;;;;CAET;AAAA,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;AAExB,IAAM,IAAI,GAAG,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;AACrD,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC","sourcesContent":["// Start listening on port 8080 of localhost.\nconst server = Deno.listen({ port: 8080 });\nconsole.log(`HTTP webserver running.  Access it at:  http://localhost:8080/`);\n\n// Connections to the server will be yielded up as an async iterable.\nfor await (const conn of server) {\n    // In order to not be blocking, we need to handle each connection individually\n    // without awaiting the function\n    serveHttp(conn);\n}\n\nasync function serveHttp(conn: Deno.Conn) {\n    // This \"upgrades\" a network connection into an HTTP connection.\n    const httpConn = Deno.serveHttp(conn);\n    // Each request sent over the HTTP connection will be yielded as an async\n    // iterator from the HTTP connection.\n    for await (const requestEvent of httpConn) {\n        // The native HTTP server uses the web standard `Request` and `Response`\n        // objects.\n        const body = `Your user-agent is:\\n\\n${\n            requestEvent.request.headers.get(\n                \"user-agent\",\n            ) ?? \"Unknown\"\n        }`;\n        // The requestEvent's `.respondWith()` method is how we send the response\n        // back to the client.\n        requestEvent.respondWith(\n            new Response(body, {\n                status: 200,\n            }),\n        );\n    }\n}res = await fetch(url);\n\nconst body = new Uint8Array(await res.arrayBuffer());\nawait Deno.stdout.write(body);"]}